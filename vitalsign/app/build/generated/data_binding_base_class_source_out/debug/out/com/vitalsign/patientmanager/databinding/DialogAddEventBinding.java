// Generated by view binder compiler. Do not edit!
package com.vitalsign.patientmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.vitalsign.patientmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class DialogAddEventBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonPickDate;

  @NonNull
  public final TextInputEditText editEventDay;

  @NonNull
  public final TextInputEditText editEventDescription;

  @NonNull
  public final TextInputEditText editEventMonth;

  @NonNull
  public final TextView textEventDate;

  private DialogAddEventBinding(@NonNull LinearLayout rootView, @NonNull Button buttonPickDate,
      @NonNull TextInputEditText editEventDay, @NonNull TextInputEditText editEventDescription,
      @NonNull TextInputEditText editEventMonth, @NonNull TextView textEventDate) {
    this.rootView = rootView;
    this.buttonPickDate = buttonPickDate;
    this.editEventDay = editEventDay;
    this.editEventDescription = editEventDescription;
    this.editEventMonth = editEventMonth;
    this.textEventDate = textEventDate;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static DialogAddEventBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static DialogAddEventBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.dialog_add_event, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static DialogAddEventBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonPickDate;
      Button buttonPickDate = ViewBindings.findChildViewById(rootView, id);
      if (buttonPickDate == null) {
        break missingId;
      }

      id = R.id.editEventDay;
      TextInputEditText editEventDay = ViewBindings.findChildViewById(rootView, id);
      if (editEventDay == null) {
        break missingId;
      }

      id = R.id.editEventDescription;
      TextInputEditText editEventDescription = ViewBindings.findChildViewById(rootView, id);
      if (editEventDescription == null) {
        break missingId;
      }

      id = R.id.editEventMonth;
      TextInputEditText editEventMonth = ViewBindings.findChildViewById(rootView, id);
      if (editEventMonth == null) {
        break missingId;
      }

      id = R.id.textEventDate;
      TextView textEventDate = ViewBindings.findChildViewById(rootView, id);
      if (textEventDate == null) {
        break missingId;
      }

      return new DialogAddEventBinding((LinearLayout) rootView, buttonPickDate, editEventDay,
          editEventDescription, editEventMonth, textEventDate);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
