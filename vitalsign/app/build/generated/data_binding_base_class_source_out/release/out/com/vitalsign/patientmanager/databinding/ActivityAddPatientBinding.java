// Generated by view binder compiler. Do not edit!
package com.vitalsign.patientmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.widget.Toolbar;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.google.android.material.textfield.TextInputEditText;
import com.vitalsign.patientmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityAddPatientBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonCancel;

  @NonNull
  public final Button buttonClearDOB;

  @NonNull
  public final Button buttonSave;

  @NonNull
  public final TextInputEditText editDateOfBirth;

  @NonNull
  public final TextInputEditText editPatientName;

  @NonNull
  public final TextView textCurrentDateTime;

  @NonNull
  public final Toolbar toolbar;

  private ActivityAddPatientBinding(@NonNull LinearLayout rootView, @NonNull Button buttonCancel,
      @NonNull Button buttonClearDOB, @NonNull Button buttonSave,
      @NonNull TextInputEditText editDateOfBirth, @NonNull TextInputEditText editPatientName,
      @NonNull TextView textCurrentDateTime, @NonNull Toolbar toolbar) {
    this.rootView = rootView;
    this.buttonCancel = buttonCancel;
    this.buttonClearDOB = buttonClearDOB;
    this.buttonSave = buttonSave;
    this.editDateOfBirth = editDateOfBirth;
    this.editPatientName = editPatientName;
    this.textCurrentDateTime = textCurrentDateTime;
    this.toolbar = toolbar;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityAddPatientBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityAddPatientBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_add_patient, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityAddPatientBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonCancel;
      Button buttonCancel = ViewBindings.findChildViewById(rootView, id);
      if (buttonCancel == null) {
        break missingId;
      }

      id = R.id.buttonClearDOB;
      Button buttonClearDOB = ViewBindings.findChildViewById(rootView, id);
      if (buttonClearDOB == null) {
        break missingId;
      }

      id = R.id.buttonSave;
      Button buttonSave = ViewBindings.findChildViewById(rootView, id);
      if (buttonSave == null) {
        break missingId;
      }

      id = R.id.editDateOfBirth;
      TextInputEditText editDateOfBirth = ViewBindings.findChildViewById(rootView, id);
      if (editDateOfBirth == null) {
        break missingId;
      }

      id = R.id.editPatientName;
      TextInputEditText editPatientName = ViewBindings.findChildViewById(rootView, id);
      if (editPatientName == null) {
        break missingId;
      }

      id = R.id.textCurrentDateTime;
      TextView textCurrentDateTime = ViewBindings.findChildViewById(rootView, id);
      if (textCurrentDateTime == null) {
        break missingId;
      }

      id = R.id.toolbar;
      Toolbar toolbar = ViewBindings.findChildViewById(rootView, id);
      if (toolbar == null) {
        break missingId;
      }

      return new ActivityAddPatientBinding((LinearLayout) rootView, buttonCancel, buttonClearDOB,
          buttonSave, editDateOfBirth, editPatientName, textCurrentDateTime, toolbar);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
