// Generated by view binder compiler. Do not edit!
package com.vitalsign.patientmanager.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.LinearLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.vitalsign.patientmanager.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ItemTimelineMonthBinding implements ViewBinding {
  @NonNull
  private final LinearLayout rootView;

  @NonNull
  public final Button buttonExpandDays;

  @NonNull
  public final TextView textDate;

  @NonNull
  public final TextView textDay;

  @NonNull
  public final TextView textEvent;

  @NonNull
  public final TextView textMonth;

  private ItemTimelineMonthBinding(@NonNull LinearLayout rootView, @NonNull Button buttonExpandDays,
      @NonNull TextView textDate, @NonNull TextView textDay, @NonNull TextView textEvent,
      @NonNull TextView textMonth) {
    this.rootView = rootView;
    this.buttonExpandDays = buttonExpandDays;
    this.textDate = textDate;
    this.textDay = textDay;
    this.textEvent = textEvent;
    this.textMonth = textMonth;
  }

  @Override
  @NonNull
  public LinearLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ItemTimelineMonthBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ItemTimelineMonthBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.item_timeline_month, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ItemTimelineMonthBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.buttonExpandDays;
      Button buttonExpandDays = ViewBindings.findChildViewById(rootView, id);
      if (buttonExpandDays == null) {
        break missingId;
      }

      id = R.id.textDate;
      TextView textDate = ViewBindings.findChildViewById(rootView, id);
      if (textDate == null) {
        break missingId;
      }

      id = R.id.textDay;
      TextView textDay = ViewBindings.findChildViewById(rootView, id);
      if (textDay == null) {
        break missingId;
      }

      id = R.id.textEvent;
      TextView textEvent = ViewBindings.findChildViewById(rootView, id);
      if (textEvent == null) {
        break missingId;
      }

      id = R.id.textMonth;
      TextView textMonth = ViewBindings.findChildViewById(rootView, id);
      if (textMonth == null) {
        break missingId;
      }

      return new ItemTimelineMonthBinding((LinearLayout) rootView, buttonExpandDays, textDate,
          textDay, textEvent, textMonth);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
